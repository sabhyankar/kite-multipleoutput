/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cloudera.sa;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Words extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Words\",\"namespace\":\"com.cloudera.sa\",\"fields\":[{\"name\":\"word\",\"type\":\"string\"},{\"name\":\"count\",\"type\":\"int\"}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
    @Deprecated public java.lang.CharSequence word;
    @Deprecated public int count;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Words() {}

    /**
     * All-args constructor.
     */
    public Words(java.lang.CharSequence word, java.lang.Integer count) {
        this.word = word;
        this.count = count;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return word;
            case 1: return count;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: word = (java.lang.CharSequence)value$; break;
            case 1: count = (java.lang.Integer)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'word' field.
     */
    public java.lang.CharSequence getWord() {
        return word;
    }

    /**
     * Sets the value of the 'word' field.
     * @param value the value to set.
     */
    public void setWord(java.lang.CharSequence value) {
        this.word = value;
    }

    /**
     * Gets the value of the 'count' field.
     */
    public java.lang.Integer getCount() {
        return count;
    }

    /**
     * Sets the value of the 'count' field.
     * @param value the value to set.
     */
    public void setCount(java.lang.Integer value) {
        this.count = value;
    }

    /** Creates a new Words RecordBuilder */
    public static com.cloudera.sa.Words.Builder newBuilder() {
        return new com.cloudera.sa.Words.Builder();
    }

    /** Creates a new Words RecordBuilder by copying an existing Builder */
    public static com.cloudera.sa.Words.Builder newBuilder(com.cloudera.sa.Words.Builder other) {
        return new com.cloudera.sa.Words.Builder(other);
    }

    /** Creates a new Words RecordBuilder by copying an existing Words instance */
    public static com.cloudera.sa.Words.Builder newBuilder(com.cloudera.sa.Words other) {
        return new com.cloudera.sa.Words.Builder(other);
    }

    /**
     * RecordBuilder for Words instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Words>
            implements org.apache.avro.data.RecordBuilder<Words> {

        private java.lang.CharSequence word;
        private int count;

        /** Creates a new Builder */
        private Builder() {
            super(com.cloudera.sa.Words.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(com.cloudera.sa.Words.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.word)) {
                this.word = data().deepCopy(fields()[0].schema(), other.word);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.count)) {
                this.count = data().deepCopy(fields()[1].schema(), other.count);
                fieldSetFlags()[1] = true;
            }
        }

        /** Creates a Builder by copying an existing Words instance */
        private Builder(com.cloudera.sa.Words other) {
            super(com.cloudera.sa.Words.SCHEMA$);
            if (isValidValue(fields()[0], other.word)) {
                this.word = data().deepCopy(fields()[0].schema(), other.word);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.count)) {
                this.count = data().deepCopy(fields()[1].schema(), other.count);
                fieldSetFlags()[1] = true;
            }
        }

        /**
         * Gets the value of the 'word' field.
         */
        public java.lang.CharSequence getWord() {
            return word;
        }

        /**
         * Sets the value of the 'word' field.
         * @param value the value to set.
         */
        public com.cloudera.sa.Words.Builder setWord(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.word = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'word' field has been set.
         */
        public boolean hasWord() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'word' field.
         */
        public com.cloudera.sa.Words.Builder clearWord() {
            word = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'count' field.
         */
        public java.lang.Integer getCount() {
            return count;
        }

        /**
         * Sets the value of the 'count' field.
         * @param value the value to set.
         */
        public com.cloudera.sa.Words.Builder setCount(int value) {
            validate(fields()[1], value);
            this.count = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'count' field has been set.
         */
        public boolean hasCount() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'count' field.
         */
        public com.cloudera.sa.Words.Builder clearCount() {
            fieldSetFlags()[1] = false;
            return this;
        }

        @Override
        public Words build() {
            try {
                Words record = new Words();
                record.word = fieldSetFlags()[0] ? this.word : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.count = fieldSetFlags()[1] ? this.count : (java.lang.Integer) defaultValue(fields()[1]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}